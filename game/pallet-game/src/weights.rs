
//! Autogenerated weights for pallet_game
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-08-01, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `admin`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_game
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --execution
// wasm
// --output
// ./benchmarking/pallet-game/weights.rs
// --template
// .maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for pallet_game.
pub trait WeightInfo {
	fn create_game() -> Weight;
	fn create_game_collection() -> Weight;
	fn create_item() -> Weight;
	fn add_supply() -> Weight;
	fn burn() -> Weight;
	fn transfer() -> Weight;
	fn set_upgrade_item(s: u32, ) -> Weight;
	fn upgrade_item() -> Weight;
	fn set_price() -> Weight;
	fn buy_item() -> Weight;
	fn set_bundle(s: u32, ) -> Weight;
	fn buy_bundle() -> Weight;
	fn set_wishlist(s: u32, ) -> Weight;
	fn claim_wishlist() -> Weight;
	fn remove_collection() -> Weight;
	fn set_swap(s: u32, x: u32, ) -> Weight;
	fn claim_swap() -> Weight;
	fn set_auction(s: u32, ) -> Weight;
	fn bid_auction() -> Weight;
	fn claim_auction() -> Weight;
	fn set_buy() -> Weight;
	fn claim_set_buy() -> Weight;
	fn create_collection() -> Weight;
	fn set_accept_adding() -> Weight;
	fn add_game_collection() -> Weight;
	fn add_retail_supply() -> Weight;
	fn cancel_trade() -> Weight;
	fn create_dynamic_pool(s: u32, ) -> Weight;
	fn create_stable_pool(s: u32, ) -> Weight;
	fn mint() -> Weight;
}

/// Weights for pallet_game using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Game NextGameId (r:1 w:1)
	/// Proof: Game NextGameId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game GameAccount (r:0 w:1)
	/// Proof: Game GameAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: Game Game (r:0 w:1)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:0 w:1)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	fn create_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_game_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `3593`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(63_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game SupplyOf (r:0 w:1)
	/// Proof: Game SupplyOf (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3956`
		// Minimum execution time: 75_000_000 picoseconds.
		Weight::from_parts(78_000_000, 3956)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game SupplyOf (r:1 w:1)
	/// Proof: Game SupplyOf (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn add_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `513`
		//  Estimated: `3549`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 3549)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3549`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3549)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3549`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 3549)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:1)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:0 w:1)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game LevelOf (r:0 w:1)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 50]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `822`
		//  Estimated: `6036`
		// Minimum execution time: 111_000_000 picoseconds.
		Weight::from_parts(115_785_527, 6036)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: Game LevelOf (r:1 w:0)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:1 w:0)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:0)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn upgrade_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `6108`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_000_000, 6108)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `695`
		//  Estimated: `3606`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(67_000_000, 3606)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn buy_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `874`
		//  Estimated: `3667`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_000_000, 3667)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3606`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(39_151_543, 3606)
			// Standard Error: 29_545
			.saturating_add(Weight::from_parts(15_047_888, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn buy_bundle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1012`
		//  Estimated: `6108`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(92_000_000, 6108)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `179`
		//  Estimated: `3606`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(50_417_155, 3606)
			// Standard Error: 7_257
			.saturating_add(Weight::from_parts(78_062, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn claim_wishlist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `986`
		//  Estimated: `11226`
		// Minimum execution time: 115_000_000 picoseconds.
		Weight::from_parts(116_000_000, 11226)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn remove_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460`
		//  Estimated: `3534`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3534)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	/// The range of component `x` is `[0, 10]`.
	fn set_swap(s: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3606`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(38_536_252, 3606)
			// Standard Error: 15_366
			.saturating_add(Weight::from_parts(14_995_853, 0).saturating_mul(s.into()))
			// Standard Error: 15_366
			.saturating_add(Weight::from_parts(156_040, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726`
		//  Estimated: `11226`
		// Minimum execution time: 110_000_000 picoseconds.
		Weight::from_parts(112_000_000, 11226)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game AuctionConfigOf (r:0 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3606`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(39_078_697, 3606)
			// Standard Error: 25_704
			.saturating_add(Weight::from_parts(15_084_359, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:0)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn bid_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3593`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(39_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn claim_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712`
		//  Estimated: `6108`
		// Minimum execution time: 100_000_000 picoseconds.
		Weight::from_parts(103_000_000, 6108)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	fn set_buy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(52_000_000, 3606)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_set_buy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `871`
		//  Estimated: `3667`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(71_000_000, 3667)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:0 w:1)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn set_accept_adding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `3593`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 3593)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:1 w:0)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn add_game_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `3534`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3534)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn add_retail_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `874`
		//  Estimated: `3667`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(47_000_000, 3667)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_trade() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `611`
		//  Estimated: `6108`
		// Minimum execution time: 80_000_000 picoseconds.
		Weight::from_parts(81_000_000, 6108)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Game NextPoolId (r:1 w:1)
	/// Proof: Game NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game PoolOf (r:1 w:1)
	/// Proof: Game PoolOf (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game LootTableOf (r:0 w:1)
	/// Proof: Game LootTableOf (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_dynamic_pool(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3593`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(38_455_567, 3593)
			// Standard Error: 29_082
			.saturating_add(Weight::from_parts(15_081_954, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Game NextPoolId (r:1 w:1)
	/// Proof: Game NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game SupplyOf (r:1 w:0)
	/// Proof: Game SupplyOf (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game LootTableOf (r:0 w:1)
	/// Proof: Game LootTableOf (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	/// Storage: Game PoolOf (r:0 w:1)
	/// Proof: Game PoolOf (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_stable_pool(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `500`
		//  Estimated: `3593`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(38_922_647, 3593)
			// Standard Error: 31_383
			.saturating_add(Weight::from_parts(4_046_316, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Game PoolOf (r:1 w:0)
	/// Proof: Game PoolOf (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Game LootTableOf (r:1 w:0)
	/// Proof: Game LootTableOf (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	/// Storage: Game RandomSeed (r:1 w:0)
	/// Proof: Game RandomSeed (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `286`
		//  Estimated: `4079`
		// Minimum execution time: 118_000_000 picoseconds.
		Weight::from_parts(120_000_000, 4079)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Game NextGameId (r:1 w:1)
	/// Proof: Game NextGameId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game GameAccount (r:0 w:1)
	/// Proof: Game GameAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: Game Game (r:0 w:1)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:0 w:1)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	fn create_game() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_game_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `388`
		//  Estimated: `3593`
		// Minimum execution time: 62_000_000 picoseconds.
		Weight::from_parts(63_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game SupplyOf (r:0 w:1)
	/// Proof: Game SupplyOf (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	fn create_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3956`
		// Minimum execution time: 75_000_000 picoseconds.
		Weight::from_parts(78_000_000, 3956)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game SupplyOf (r:1 w:1)
	/// Proof: Game SupplyOf (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn add_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `513`
		//  Estimated: `3549`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 3549)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn burn() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3549`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3549)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `191`
		//  Estimated: `3549`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_000_000, 3549)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:1)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:0 w:1)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game LevelOf (r:0 w:1)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 50]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `822`
		//  Estimated: `6036`
		// Minimum execution time: 111_000_000 picoseconds.
		Weight::from_parts(115_785_527, 6036)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: Game LevelOf (r:1 w:0)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:1 w:0)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:0)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn upgrade_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `720`
		//  Estimated: `6108`
		// Minimum execution time: 47_000_000 picoseconds.
		Weight::from_parts(48_000_000, 6108)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	fn set_price() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `695`
		//  Estimated: `3606`
		// Minimum execution time: 66_000_000 picoseconds.
		Weight::from_parts(67_000_000, 3606)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn buy_item() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `874`
		//  Estimated: `3667`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_000_000, 3667)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3606`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(39_151_543, 3606)
			// Standard Error: 29_545
			.saturating_add(Weight::from_parts(15_047_888, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn buy_bundle() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1012`
		//  Estimated: `6108`
		// Minimum execution time: 91_000_000 picoseconds.
		Weight::from_parts(92_000_000, 6108)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `179`
		//  Estimated: `3606`
		// Minimum execution time: 48_000_000 picoseconds.
		Weight::from_parts(50_417_155, 3606)
			// Standard Error: 7_257
			.saturating_add(Weight::from_parts(78_062, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn claim_wishlist() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `986`
		//  Estimated: `11226`
		// Minimum execution time: 115_000_000 picoseconds.
		Weight::from_parts(116_000_000, 11226)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn remove_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `460`
		//  Estimated: `3534`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(24_000_000, 3534)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	/// The range of component `x` is `[0, 10]`.
	fn set_swap(s: u32, x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3606`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(38_536_252, 3606)
			// Standard Error: 15_366
			.saturating_add(Weight::from_parts(14_995_853, 0).saturating_mul(s.into()))
			// Standard Error: 15_366
			.saturating_add(Weight::from_parts(156_040, 0).saturating_mul(x.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_swap() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `726`
		//  Estimated: `11226`
		// Minimum execution time: 110_000_000 picoseconds.
		Weight::from_parts(112_000_000, 11226)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game AuctionConfigOf (r:0 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3606`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(39_078_697, 3606)
			// Standard Error: 25_704
			.saturating_add(Weight::from_parts(15_084_359, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:0)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn bid_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `445`
		//  Estimated: `3593`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(39_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn claim_auction() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `712`
		//  Estimated: `6108`
		// Minimum execution time: 100_000_000 picoseconds.
		Weight::from_parts(103_000_000, 6108)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	fn set_buy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(52_000_000, 3606)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim_set_buy() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `871`
		//  Estimated: `3667`
		// Minimum execution time: 70_000_000 picoseconds.
		Weight::from_parts(71_000_000, 3667)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(51_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:0 w:1)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	fn set_accept_adding() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `3593`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_000_000, 3593)
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:1 w:0)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	fn add_game_collection() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `3534`
		// Minimum execution time: 20_000_000 picoseconds.
		Weight::from_parts(21_000_000, 3534)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn add_retail_supply() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `874`
		//  Estimated: `3667`
		// Minimum execution time: 46_000_000 picoseconds.
		Weight::from_parts(47_000_000, 3667)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(202), added: 2677, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn cancel_trade() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `611`
		//  Estimated: `6108`
		// Minimum execution time: 80_000_000 picoseconds.
		Weight::from_parts(81_000_000, 6108)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Game NextPoolId (r:1 w:1)
	/// Proof: Game NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game PoolOf (r:1 w:1)
	/// Proof: Game PoolOf (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game LootTableOf (r:0 w:1)
	/// Proof: Game LootTableOf (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_dynamic_pool(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `294`
		//  Estimated: `3593`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(38_455_567, 3593)
			// Standard Error: 29_082
			.saturating_add(Weight::from_parts(15_081_954, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Game NextPoolId (r:1 w:1)
	/// Proof: Game NextPoolId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game SupplyOf (r:1 w:0)
	/// Proof: Game SupplyOf (max_values: None, max_size: Some(45), added: 2520, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game LootTableOf (r:0 w:1)
	/// Proof: Game LootTableOf (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	/// Storage: Game PoolOf (r:0 w:1)
	/// Proof: Game PoolOf (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_stable_pool(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `500`
		//  Estimated: `3593`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(38_922_647, 3593)
			// Standard Error: 31_383
			.saturating_add(Weight::from_parts(4_046_316, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Game PoolOf (r:1 w:0)
	/// Proof: Game PoolOf (max_values: None, max_size: Some(124), added: 2599, mode: MaxEncodedLen)
	/// Storage: Game LootTableOf (r:1 w:0)
	/// Proof: Game LootTableOf (max_values: None, max_size: Some(147), added: 2622, mode: MaxEncodedLen)
	/// Storage: Game RandomSeed (r:1 w:0)
	/// Proof: Game RandomSeed (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	fn mint() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `286`
		//  Estimated: `4079`
		// Minimum execution time: 118_000_000 picoseconds.
		Weight::from_parts(120_000_000, 4079)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}
