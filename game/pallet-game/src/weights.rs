
//! Autogenerated weights for `pallet_game`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-12, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `admin`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_game
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./benchmarking/pallet-game/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

pub trait WeightInfo {
	fn create_game(s: u32, ) -> Weight;
	fn create_game_collection(s: u32, ) -> Weight;
	fn create_item(s: u32, ) -> Weight;
	fn add_item(s: u32, ) -> Weight;
	fn mint(s: u32, ) -> Weight;
	fn burn(s: u32, ) -> Weight;
	fn transfer(s: u32, ) -> Weight;
	fn set_upgrade_item(s: u32, ) -> Weight;
	fn upgrade_item(s: u32, ) -> Weight;
	fn set_price(s: u32, ) -> Weight;
	fn buy_item(s: u32, ) -> Weight;
	fn set_bundle(s: u32, ) -> Weight;
	fn buy_bundle(s: u32, ) -> Weight;
	fn set_wishlist(s: u32, ) -> Weight;
	fn fill_wishlist(s: u32, ) -> Weight;
	fn remove_collection(s: u32) -> Weight;
	fn lock_item_transfer(s: u32) -> Weight;
	fn unlock_item_transfer(s: u32) -> Weight;
	fn set_swap(s: u32) -> Weight;
	fn claim_swap(s: u32) -> Weight;
	fn set_auction(s: u32) -> Weight;
	fn bid_auction(s: u32) -> Weight;
	fn claim_auction(s: u32) -> Weight;
	fn set_buy(s: u32) -> Weight;
	fn claim_set_buy(s: u32) -> Weight;
	fn create_collection(s: u32) -> Weight;
	fn set_accept_adding(s: u32) -> Weight;
	fn add_game_collection(s: u32) -> Weight;
	fn add_retail_supply(s: u32) -> Weight;
	fn cancel_trade(s: u32) -> Weight;
}

/// Weight functions for `pallet_game`.
pub struct GameWeightInfo<T>(PhantomData<T>);


impl<T: frame_system::Config> WeightInfo for GameWeightInfo<T> {
	/// Storage: Game NextGameId (r:1 w:1)
	/// Proof: Game NextGameId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game Game (r:0 w:1)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:0 w:1)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_869_011, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 12_033
			.saturating_add(Weight::from_parts(38_735, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:0 w:1)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `3593`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(34_362_003, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ReserveOf (r:1 w:1)
	/// Proof: Game ReserveOf (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `662`
		//  Estimated: `3956`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_803_134, 0)
			.saturating_add(Weight::from_parts(0, 3956))
			// Standard Error: 20_321
			.saturating_add(Weight::from_parts(6_498, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game ReserveOf (r:1 w:1)
	/// Proof: Game ReserveOf (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `508`
		//  Estimated: `3638`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_022_171, 0)
			.saturating_add(Weight::from_parts(0, 3638))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:1 w:0)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Game RandomSeed (r:1 w:0)
	/// Proof: Game RandomSeed (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Game ReserveOf (r:1 w:1)
	/// Proof: Game ReserveOf (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn mint(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4079`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_679_281, 0)
			.saturating_add(Weight::from_parts(0, 4079))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn burn(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `3549`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_475_344, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6108`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_342_826, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:1)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:0 w:1)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game LevelOf (r:0 w:1)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `872`
		//  Estimated: `6036`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(58_813_137, 0)
			.saturating_add(Weight::from_parts(0, 6036))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: Game LevelOf (r:1 w:0)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:1 w:0)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:0)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn upgrade_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `876`
		//  Estimated: `6108`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_421_508, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 17_810
			.saturating_add(Weight::from_parts(14_780, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_price(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `789`
		//  Estimated: `3606`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_817_660, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `3657`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_669_406, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			// Standard Error: 21_160
			.saturating_add(Weight::from_parts(22_617, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `6108`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_252_612, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_bundle(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1203`
		//  Estimated: `6108`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_140_991, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 20_146
			.saturating_add(Weight::from_parts(47_719, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_178_644, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			// Standard Error: 14_210
			.saturating_add(Weight::from_parts(5_861, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn fill_wishlist(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1074`
		//  Estimated: `6108`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(56_540_902, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 33_676
			.saturating_add(Weight::from_parts(105_122, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn remove_collection(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `3534`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_994_839, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			// Standard Error: 11_695
			.saturating_add(Weight::from_parts(11_659, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn lock_item_transfer(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_056_065, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			// Standard Error: 10_626
			.saturating_add(Weight::from_parts(13_251, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn unlock_item_transfer(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_099_197, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			// Standard Error: 12_561
			.saturating_add(Weight::from_parts(16_628, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_swap(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `6108`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_375_382, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 28_837
			.saturating_add(Weight::from_parts(9_938, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_swap(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `890`
		//  Estimated: `11226`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(61_356_460, 0)
			.saturating_add(Weight::from_parts(0, 11226))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game AuctionConfigOf (r:0 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `6108`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(37_759_875, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 32_017
			.saturating_add(Weight::from_parts(13_697, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:0)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn bid_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `3593`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_044_469, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `892`
		//  Estimated: `6108`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(53_943_616, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_buy(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_451_197, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			// Standard Error: 15_294
			.saturating_add(Weight::from_parts(50_586, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_set_buy(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967`
		//  Estimated: `3657`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(39_284_594, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:0 w:1)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(25_041_029, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:0 w:1)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_accept_adding(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `3593`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_923_802, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:1 w:0)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_game_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `3534`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_941_768, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_retail_supply(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `3657`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(30_229_230, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn cancel_trade(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `796`
		//  Estimated: `6108`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(45_820_591, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 22_596
			.saturating_add(Weight::from_parts(57_594, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
}

impl WeightInfo for () {
	/// Storage: Game NextGameId (r:1 w:1)
	/// Proof: Game NextGameId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game Game (r:0 w:1)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:0 w:1)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_869_011, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 12_033
			.saturating_add(Weight::from_parts(38_735, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:0 w:1)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `3593`
		// Minimum execution time: 33_000_000 picoseconds.
		Weight::from_parts(34_362_003, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ReserveOf (r:1 w:1)
	/// Proof: Game ReserveOf (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `662`
		//  Estimated: `3956`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(38_803_134, 0)
			.saturating_add(Weight::from_parts(0, 3956))
			// Standard Error: 20_321
			.saturating_add(Weight::from_parts(6_498, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game ReserveOf (r:1 w:1)
	/// Proof: Game ReserveOf (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `508`
		//  Estimated: `3638`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_022_171, 0)
			.saturating_add(Weight::from_parts(0, 3638))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:1 w:0)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Game RandomSeed (r:1 w:0)
	/// Proof: Game RandomSeed (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Game ReserveOf (r:1 w:1)
	/// Proof: Game ReserveOf (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn mint(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4079`
		// Minimum execution time: 25_000_000 picoseconds.
		Weight::from_parts(26_679_281, 0)
			.saturating_add(Weight::from_parts(0, 4079))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn burn(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `3549`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_475_344, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6108`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_342_826, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:1)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:0 w:1)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game LevelOf (r:0 w:1)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `872`
		//  Estimated: `6036`
		// Minimum execution time: 54_000_000 picoseconds.
		Weight::from_parts(58_813_137, 0)
			.saturating_add(Weight::from_parts(0, 6036))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	/// Storage: Game LevelOf (r:1 w:0)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:1 w:0)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:0)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn upgrade_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `876`
		//  Estimated: `6108`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_421_508, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 17_810
			.saturating_add(Weight::from_parts(14_780, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_price(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `789`
		//  Estimated: `3606`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(36_817_660, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `3657`
		// Minimum execution time: 31_000_000 picoseconds.
		Weight::from_parts(32_669_406, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			// Standard Error: 21_160
			.saturating_add(Weight::from_parts(22_617, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `6108`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_252_612, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_bundle(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1203`
		//  Estimated: `6108`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(54_140_991, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 20_146
			.saturating_add(Weight::from_parts(47_719, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_178_644, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			// Standard Error: 14_210
			.saturating_add(Weight::from_parts(5_861, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn fill_wishlist(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1074`
		//  Estimated: `6108`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(56_540_902, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 33_676
			.saturating_add(Weight::from_parts(105_122, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn remove_collection(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `540`
		//  Estimated: `3534`
		// Minimum execution time: 16_000_000 picoseconds.
		Weight::from_parts(16_994_839, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			// Standard Error: 11_695
			.saturating_add(Weight::from_parts(11_659, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn lock_item_transfer(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_056_065, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			// Standard Error: 10_626
			.saturating_add(Weight::from_parts(13_251, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn unlock_item_transfer(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_099_197, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			// Standard Error: 12_561
			.saturating_add(Weight::from_parts(16_628, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_swap(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `6108`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_375_382, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 28_837
			.saturating_add(Weight::from_parts(9_938, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_swap(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `890`
		//  Estimated: `11226`
		// Minimum execution time: 59_000_000 picoseconds.
		Weight::from_parts(61_356_460, 0)
			.saturating_add(Weight::from_parts(0, 11226))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game AuctionConfigOf (r:0 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `477`
		//  Estimated: `6108`
		// Minimum execution time: 35_000_000 picoseconds.
		Weight::from_parts(37_759_875, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 32_017
			.saturating_add(Weight::from_parts(13_697, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:0)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn bid_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `516`
		//  Estimated: `3593`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_044_469, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `892`
		//  Estimated: `6108`
		// Minimum execution time: 50_000_000 picoseconds.
		Weight::from_parts(53_943_616, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_buy(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_451_197, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			// Standard Error: 15_294
			.saturating_add(Weight::from_parts(50_586, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_set_buy(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `967`
		//  Estimated: `3657`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(39_284_594, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:0 w:1)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 23_000_000 picoseconds.
		Weight::from_parts(25_041_029, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:0 w:1)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_accept_adding(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `401`
		//  Estimated: `3593`
		// Minimum execution time: 19_000_000 picoseconds.
		Weight::from_parts(20_923_802, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game AddingAcceptance (r:1 w:0)
	/// Proof: Game AddingAcceptance (max_values: None, max_size: Some(24), added: 2499, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:1 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_game_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `212`
		//  Estimated: `3534`
		// Minimum execution time: 12_000_000 picoseconds.
		Weight::from_parts(12_941_768, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_retail_supply(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `970`
		//  Estimated: `3657`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(30_229_230, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn cancel_trade(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `796`
		//  Estimated: `6108`
		// Minimum execution time: 44_000_000 picoseconds.
		Weight::from_parts(45_820_591, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 22_596
			.saturating_add(Weight::from_parts(57_594, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
}
