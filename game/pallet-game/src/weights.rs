//! Autogenerated weights for `pallet_game`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-02, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `admin`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_game
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./benchmarking/pallet-game/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

pub trait WeightInfo {
	fn create_game(s: u32, ) -> Weight;
	fn create_game_collection(s: u32, ) -> Weight;
	fn create_item(s: u32, ) -> Weight;
	fn add_item(s: u32, ) -> Weight;
	fn mint(s: u32, ) -> Weight;
	fn burn(s: u32, ) -> Weight;
	fn transfer(s: u32, ) -> Weight;
	fn set_upgrade_item(s: u32, ) -> Weight;
	fn upgrade_item(s: u32, ) -> Weight;
	fn set_price(s: u32, ) -> Weight;
	fn buy_item(s: u32, ) -> Weight;
	fn set_bundle(s: u32, ) -> Weight;
	fn buy_bundle(s: u32, ) -> Weight;
	fn cancel_set_price(s: u32, ) -> Weight;
	fn cancel_set_bundle(s: u32, ) -> Weight;
	fn set_wishlist(s: u32, ) -> Weight;
	fn fill_wishlist(s: u32, ) -> Weight;
	fn remove_collection(s: u32) -> Weight;
	fn lock_item_transfer(s: u32) -> Weight;
	fn unlock_item_transfer(s: u32) -> Weight;
	fn set_swap(s: u32) -> Weight;
	fn claim_swap(s: u32) -> Weight;
	fn set_auction(s: u32) -> Weight;
	fn bid_auction(s: u32) -> Weight;
	fn claim_auction(s: u32) -> Weight;
}

/// Weight functions for `pallet_game`.
pub struct GameWeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for GameWeightInfo<T> {
	// Storage: Game NextGameId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game Game (r:0 w:1)
	// Storage: Game GameRoleOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(_s: u32, ) -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_257_645)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Game Game (r:1 w:0)
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game CollectionsOf (r:1 w:1)
	// Storage: Game MintingFeeOf (r:0 w:1)
	// Storage: Game GameOf (r:0 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(_s: u32, ) -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(36_258_473)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Game GameOf (r:1 w:0)
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemReserve (r:1 w:1)
	// Storage: Game TotalReserveOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_item(_s: u32, ) -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(42_001_401)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Game GameOf (r:1 w:0)
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Game ItemReserve (r:1 w:1)
	// Storage: Game TotalReserveOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn add_item(_s: u32, ) -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(19_962_155)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Game TotalReserveOf (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Game MintingFeeOf (r:1 w:0)
	// Storage: Game RandomSeed (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Game ItemReserve (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn mint(s: u32, ) -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(29_177_051)
			// Standard Error: 24_683
			.saturating_add(Weight::from_ref_time(54_727).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Game ItemBalanceOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn burn(_s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_188_391)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn transfer(_s: u32, ) -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_908_511)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:2 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemMetadataOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game UpgradeConfigOf (r:1 w:1)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Game OriginItemOf (r:0 w:1)
	// Storage: Game LevelOf (r:0 w:1)
	// Storage: Nfts Account (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Minimum execution time: 55_000 nanoseconds.
		Weight::from_ref_time(57_676_223)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	// Storage: Game LevelOf (r:1 w:0)
	// Storage: Game OriginItemOf (r:1 w:0)
	// Storage: Game UpgradeConfigOf (r:1 w:0)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn upgrade_item(_s: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(33_453_682)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:1 w:1)
	// Storage: Game TradeConfigOf (r:0 w:1)
	// Storage: Game PackageOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_price(s: u32, ) -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(41_096_139)
			// Standard Error: 36_488
			.saturating_add(Weight::from_ref_time(103_784).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Game PackageOf (r:1 w:1)
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Game LockBalanceOf (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn buy_item(_s: u32, ) -> Weight {
		// Minimum execution time: 33_000 nanoseconds.
		Weight::from_ref_time(35_498_916)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game TradeConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(_s: u32, ) -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(43_106_523)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:2 w:0)
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn buy_bundle(_s: u32, ) -> Weight {
		// Minimum execution time: 51_000 nanoseconds.
		Weight::from_ref_time(54_369_520)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Game PackageOf (r:1 w:1)
	// Storage: Game TradeConfigOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn cancel_set_price(s: u32, ) -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(35_935_588)
			// Standard Error: 29_720
			.saturating_add(Weight::from_ref_time(96_139).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: Game TradeConfigOf (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn cancel_set_bundle(s: u32, ) -> Weight {
		// Minimum execution time: 44_000 nanoseconds.
		Weight::from_ref_time(45_909_276)
			// Standard Error: 49_811
			.saturating_add(Weight::from_ref_time(196_738).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game TradeConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(s: u32, ) -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(26_081_931)
			// Standard Error: 23_118
			.saturating_add(Weight::from_ref_time(33_002).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:2 w:0)
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn fill_wishlist(_s: u32, ) -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(54_907_301)
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Game Game (r:1 w:0)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Game CollectionsOf (r:1 w:1)
	// Storage: Game GameOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn remove_collection(_s: u32, ) -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_ref_time(22_208_970)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn lock_item_transfer(_s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_436_289)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn unlock_item_transfer(_s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_463_493)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game TradeConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_swap(s: u32, ) -> Weight {
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(41_617_163)
			// Standard Error: 38_556
			.saturating_add(Weight::from_ref_time(25_420).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: Game ItemBalanceOf (r:4 w:4)
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn claim_swap(_s: u32, ) -> Weight {
		// Minimum execution time: 56_000 nanoseconds.
		Weight::from_ref_time(60_561_098)
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game AuctionConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(_s: u32, ) -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(41_327_726)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Game AuctionConfigOf (r:1 w:0)
	// Storage: Game BidWinnerOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn bid_auction(s: u32, ) -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(20_806_702)
			// Standard Error: 20_079
			.saturating_add(Weight::from_ref_time(43_705).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Game AuctionConfigOf (r:1 w:1)
	// Storage: Game BidWinnerOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn claim_auction(s: u32, ) -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(50_783_511)
			// Standard Error: 55_833
			.saturating_add(Weight::from_ref_time(135_193).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
}


impl WeightInfo for () {
	// Storage: Game NextGameId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game Game (r:0 w:1)
	// Storage: Game GameRoleOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(_s: u32, ) -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_257_645)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Game Game (r:1 w:0)
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game CollectionsOf (r:1 w:1)
	// Storage: Game MintingFeeOf (r:0 w:1)
	// Storage: Game GameOf (r:0 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(_s: u32, ) -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(36_258_473)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: Game GameOf (r:1 w:0)
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemReserve (r:1 w:1)
	// Storage: Game TotalReserveOf (r:1 w:1)
	// Storage: Nfts Account (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_item(_s: u32, ) -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(42_001_401)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Game GameOf (r:1 w:0)
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Game ItemReserve (r:1 w:1)
	// Storage: Game TotalReserveOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn add_item(_s: u32, ) -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(19_962_155)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Game TotalReserveOf (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Game MintingFeeOf (r:1 w:0)
	// Storage: Game RandomSeed (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: Game ItemReserve (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn mint(s: u32, ) -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(29_177_051)
			// Standard Error: 24_683
			.saturating_add(Weight::from_ref_time(54_727).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Game ItemBalanceOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn burn(_s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_188_391)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn transfer(_s: u32, ) -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(21_908_511)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: Nfts ItemConfigOf (r:2 w:1)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemMetadataOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game UpgradeConfigOf (r:1 w:1)
	// Storage: Nfts Item (r:1 w:1)
	// Storage: Game OriginItemOf (r:0 w:1)
	// Storage: Game LevelOf (r:0 w:1)
	// Storage: Nfts Account (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Minimum execution time: 55_000 nanoseconds.
		Weight::from_ref_time(57_676_223)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	// Storage: Game LevelOf (r:1 w:0)
	// Storage: Game OriginItemOf (r:1 w:0)
	// Storage: Game UpgradeConfigOf (r:1 w:0)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn upgrade_item(_s: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(33_453_682)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:1 w:1)
	// Storage: Game TradeConfigOf (r:0 w:1)
	// Storage: Game PackageOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_price(s: u32, ) -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(41_096_139)
			// Standard Error: 36_488
			.saturating_add(Weight::from_ref_time(103_784).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Game PackageOf (r:1 w:1)
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:0)
	// Storage: Game LockBalanceOf (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn buy_item(_s: u32, ) -> Weight {
		// Minimum execution time: 33_000 nanoseconds.
		Weight::from_ref_time(35_498_916)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game TradeConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(_s: u32, ) -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(43_106_523)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:2 w:0)
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn buy_bundle(_s: u32, ) -> Weight {
		// Minimum execution time: 51_000 nanoseconds.
		Weight::from_ref_time(54_369_520)
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Game PackageOf (r:1 w:1)
	// Storage: Game TradeConfigOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn cancel_set_price(s: u32, ) -> Weight {
		// Minimum execution time: 34_000 nanoseconds.
		Weight::from_ref_time(35_935_588)
			// Standard Error: 29_720
			.saturating_add(Weight::from_ref_time(96_139).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	// Storage: Game TradeConfigOf (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn cancel_set_bundle(s: u32, ) -> Weight {
		// Minimum execution time: 44_000 nanoseconds.
		Weight::from_ref_time(45_909_276)
			// Standard Error: 49_811
			.saturating_add(Weight::from_ref_time(196_738).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game TradeConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(s: u32, ) -> Weight {
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_ref_time(26_081_931)
			// Standard Error: 23_118
			.saturating_add(Weight::from_ref_time(33_002).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Nfts CollectionConfigOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:2 w:0)
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn fill_wishlist(_s: u32, ) -> Weight {
		// Minimum execution time: 50_000 nanoseconds.
		Weight::from_ref_time(54_907_301)
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Game Game (r:1 w:0)
	// Storage: Nfts Collection (r:1 w:0)
	// Storage: Game CollectionsOf (r:1 w:1)
	// Storage: Game GameOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn remove_collection(_s: u32, ) -> Weight {
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_ref_time(22_208_970)
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn lock_item_transfer(_s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_436_289)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Nfts CollectionRoleOf (r:1 w:0)
	// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn unlock_item_transfer(_s: u32, ) -> Weight {
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_ref_time(18_463_493)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game TradeConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_swap(s: u32, ) -> Weight {
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(41_617_163)
			// Standard Error: 38_556
			.saturating_add(Weight::from_ref_time(25_420).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: Game TradeConfigOf (r:1 w:0)
	// Storage: Game ItemBalanceOf (r:4 w:4)
	// Storage: Game BundleOf (r:1 w:0)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn claim_swap(_s: u32, ) -> Weight {
		// Minimum execution time: 56_000 nanoseconds.
		Weight::from_ref_time(60_561_098)
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Game NextTradeId (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game AuctionConfigOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(_s: u32, ) -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(41_327_726)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: Game AuctionConfigOf (r:1 w:0)
	// Storage: Game BidWinnerOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn bid_auction(s: u32, ) -> Weight {
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_ref_time(20_806_702)
			// Standard Error: 20_079
			.saturating_add(Weight::from_ref_time(43_705).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Game AuctionConfigOf (r:1 w:1)
	// Storage: Game BidWinnerOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game BundleOf (r:1 w:1)
	// Storage: Game LockBalanceOf (r:2 w:2)
	// Storage: Game ItemBalanceOf (r:2 w:2)
	/// The range of component `s` is `[0, 10]`.
	fn claim_auction(s: u32, ) -> Weight {
		// Minimum execution time: 48_000 nanoseconds.
		Weight::from_ref_time(50_783_511)
			// Standard Error: 55_833
			.saturating_add(Weight::from_ref_time(135_193).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
}
