
//! Autogenerated weights for `pallet_game`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-05-24, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `admin`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_game
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./benchmarking/pallet-game/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

pub trait WeightInfo {
	fn create_game(s: u32, ) -> Weight;
	fn create_game_collection(s: u32, ) -> Weight;
}

/// Weight functions for `pallet_game`.
pub struct GameWeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> WeightInfo for GameWeightInfo<T> {
	// Storage: Game NextGameId (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game Game (r:0 w:1)
	// Storage: Game GameRoleOf (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(s: u32, ) -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(20_040_201)
			// Standard Error: 115_949
			.saturating_add(Weight::from_ref_time(246_623).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Game GameRoleOf (r:1 w:0)
	// Storage: Nfts NextCollectionId (r:1 w:1)
	// Storage: Nfts Collection (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Game CollectionsOf (r:1 w:1)
	// Storage: Game GameCollectionConfigOf (r:0 w:1)
	// Storage: Game GameOf (r:0 w:1)
	// Storage: Nfts CollectionRoleOf (r:0 w:1)
	// Storage: Nfts CollectionConfigOf (r:0 w:1)
	// Storage: Nfts CollectionAccount (r:0 w:1)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(s: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(33_968_845)
			// Standard Error: 24_173
			.saturating_add(Weight::from_ref_time(2_484).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(9))
	}
}


impl WeightInfo for () {
	fn create_game(s: u32, ) -> Weight {
		// Minimum execution time: 19_000 nanoseconds.
		Weight::from_ref_time(20_040_201)
			// Standard Error: 115_949
			.saturating_add(Weight::from_ref_time(246_623).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}

	fn create_game_collection(s: u32, ) -> Weight {
		// Minimum execution time: 31_000 nanoseconds.
		Weight::from_ref_time(33_968_845)
			// Standard Error: 24_173
			.saturating_add(Weight::from_ref_time(2_484).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
}
