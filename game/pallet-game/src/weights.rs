
//! Autogenerated weights for `pallet_game`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-10, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `admin`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_game
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./benchmarking/pallet-game/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

pub trait WeightInfo {
	fn create_game(s: u32, ) -> Weight;
	fn create_game_collection(s: u32, ) -> Weight;
	fn create_item(s: u32, ) -> Weight;
	fn add_item(s: u32, ) -> Weight;
	fn mint(s: u32, ) -> Weight;
	fn burn(s: u32, ) -> Weight;
	fn transfer(s: u32, ) -> Weight;
	fn set_upgrade_item(s: u32, ) -> Weight;
	fn upgrade_item(s: u32, ) -> Weight;
	fn set_price(s: u32, ) -> Weight;
	fn buy_item(s: u32, ) -> Weight;
	fn set_bundle(s: u32, ) -> Weight;
	fn buy_bundle(s: u32, ) -> Weight;
	fn set_wishlist(s: u32, ) -> Weight;
	fn fill_wishlist(s: u32, ) -> Weight;
	fn remove_collection(s: u32) -> Weight;
	fn lock_item_transfer(s: u32) -> Weight;
	fn unlock_item_transfer(s: u32) -> Weight;
	fn set_swap(s: u32) -> Weight;
	fn claim_swap(s: u32) -> Weight;
	fn set_auction(s: u32) -> Weight;
	fn bid_auction(s: u32) -> Weight;
	fn claim_auction(s: u32) -> Weight;
	fn set_buy(s: u32) -> Weight;
	fn claim_set_buy(s: u32) -> Weight;
}

/// Weight functions for `pallet_game`.
pub struct GameWeightInfo<T>(PhantomData<T>);


impl<T: frame_system::Config> WeightInfo for GameWeightInfo<T> {
	/// Storage: Game NextGameId (r:1 w:1)
	/// Proof: Game NextGameId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game Game (r:0 w:1)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:0 w:1)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_472_158, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 14_515
			.saturating_add(Weight::from_parts(60_843, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:0 w:1)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `3593`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_397_553, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 17_004
			.saturating_add(Weight::from_parts(3_058, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: Game GamesOf (r:1 w:0)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemReserve (r:1 w:1)
	/// Proof: Game ItemReserve (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `3956`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_837_410, 0)
			.saturating_add(Weight::from_parts(0, 3956))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Game GamesOf (r:1 w:0)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game ItemReserve (r:1 w:1)
	/// Proof: Game ItemReserve (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `3638`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_525_866, 0)
			.saturating_add(Weight::from_parts(0, 3638))
			// Standard Error: 16_692
			.saturating_add(Weight::from_parts(19_750, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:1 w:0)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Game RandomSeed (r:1 w:0)
	/// Proof: Game RandomSeed (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Game ItemReserve (r:1 w:1)
	/// Proof: Game ItemReserve (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn mint(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4079`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_739_487, 0)
			.saturating_add(Weight::from_parts(0, 4079))
			// Standard Error: 16_766
			.saturating_add(Weight::from_parts(39_181, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn burn(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `3549`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_448_394, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6108`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_208_014, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:1)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:0 w:1)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game LevelOf (r:0 w:1)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `875`
		//  Estimated: `6036`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(58_766_755, 0)
			.saturating_add(Weight::from_parts(0, 6036))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: Game LevelOf (r:1 w:0)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:1 w:0)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:0)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `880`
		//  Estimated: `6108`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_205_976, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_price(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792`
		//  Estimated: `3606`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_809_696, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			// Standard Error: 24_201
			.saturating_add(Weight::from_parts(45_170, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943`
		//  Estimated: `3657`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(31_332_887, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `6108`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(40_584_671, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_bundle(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1176`
		//  Estimated: `6108`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(52_524_018, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 29_473
			.saturating_add(Weight::from_parts(89_768, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_955_084, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn fill_wishlist(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1047`
		//  Estimated: `6108`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(55_072_629, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn remove_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `610`
		//  Estimated: `3561`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_911_697, 0)
			.saturating_add(Weight::from_parts(0, 3561))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn lock_item_transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_069_380, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn unlock_item_transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_082_441, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_swap(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `6108`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_172_209, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_swap(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `863`
		//  Estimated: `11226`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(59_287_015, 0)
			.saturating_add(Weight::from_parts(0, 11226))
			// Standard Error: 49_703
			.saturating_add(Weight::from_parts(94_355, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(9))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game AuctionConfigOf (r:0 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `6108`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(39_950_688, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:0)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn bid_auction(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3593`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_248_980, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 20_118
			.saturating_add(Weight::from_parts(1_274, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `869`
		//  Estimated: `6108`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(52_606_523, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(T::DbWeight::get().reads(8))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_buy(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_038_035, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_set_buy(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940`
		//  Estimated: `3657`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_178_835, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}


impl WeightInfo for () {
	/// Storage: Game NextGameId (r:1 w:1)
	/// Proof: Game NextGameId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game Game (r:0 w:1)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:0 w:1)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3593`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_472_158, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 14_515
			.saturating_add(Weight::from_parts(60_843, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:0 w:1)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_game_collection(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `354`
		//  Estimated: `3593`
		// Minimum execution time: 32_000_000 picoseconds.
		Weight::from_parts(33_397_553, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 17_004
			.saturating_add(Weight::from_parts(3_058, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	/// Storage: Game GamesOf (r:1 w:0)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemReserve (r:1 w:1)
	/// Proof: Game ItemReserve (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn create_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `665`
		//  Estimated: `3956`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(37_837_410, 0)
			.saturating_add(Weight::from_parts(0, 3956))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: Game GamesOf (r:1 w:0)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Game GameRoleOf (r:1 w:0)
	/// Proof: Game GameRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Game ItemReserve (r:1 w:1)
	/// Proof: Game ItemReserve (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn add_item(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `313`
		//  Estimated: `3638`
		// Minimum execution time: 14_000_000 picoseconds.
		Weight::from_parts(14_525_866, 0)
			.saturating_add(Weight::from_parts(0, 3638))
			// Standard Error: 16_692
			.saturating_add(Weight::from_parts(19_750, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game TotalReserveOf (r:1 w:1)
	/// Proof: Game TotalReserveOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game MintingFeeOf (r:1 w:0)
	/// Proof: Game MintingFeeOf (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// Storage: Game RandomSeed (r:1 w:0)
	/// Proof: Game RandomSeed (max_values: Some(1), max_size: Some(32), added: 527, mode: MaxEncodedLen)
	/// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	/// Proof: RandomnessCollectiveFlip RandomMaterial (max_values: Some(1), max_size: Some(2594), added: 3089, mode: MaxEncodedLen)
	/// Storage: Game ItemReserve (r:1 w:1)
	/// Proof: Game ItemReserve (max_values: None, max_size: Some(173), added: 2648, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn mint(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `613`
		//  Estimated: `4079`
		// Minimum execution time: 24_000_000 picoseconds.
		Weight::from_parts(25_739_487, 0)
			.saturating_add(Weight::from_parts(0, 4079))
			// Standard Error: 16_766
			.saturating_add(Weight::from_parts(39_181, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn burn(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `3549`
		// Minimum execution time: 11_000_000 picoseconds.
		Weight::from_parts(12_448_394, 0)
			.saturating_add(Weight::from_parts(0, 3549))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `351`
		//  Estimated: `6108`
		// Minimum execution time: 15_000_000 picoseconds.
		Weight::from_parts(16_208_014, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(140), added: 2615, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:1)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(491), added: 2966, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:0 w:1)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game LevelOf (r:0 w:1)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:0 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `875`
		//  Estimated: `6036`
		// Minimum execution time: 53_000_000 picoseconds.
		Weight::from_parts(58_766_755, 0)
			.saturating_add(Weight::from_parts(0, 6036))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	/// Storage: Game LevelOf (r:1 w:0)
	/// Proof: Game LevelOf (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Game OriginItemOf (r:1 w:0)
	/// Proof: Game OriginItemOf (max_values: None, max_size: Some(32), added: 2507, mode: MaxEncodedLen)
	/// Storage: Game UpgradeConfigOf (r:1 w:0)
	/// Proof: Game UpgradeConfigOf (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn upgrade_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `880`
		//  Estimated: `6108`
		// Minimum execution time: 28_000_000 picoseconds.
		Weight::from_parts(29_205_976, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_price(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `792`
		//  Estimated: `3606`
		// Minimum execution time: 34_000_000 picoseconds.
		Weight::from_parts(36_809_696, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			// Standard Error: 24_201
			.saturating_add(Weight::from_parts(45_170, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:1 w:1)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_item(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `943`
		//  Estimated: `3657`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(31_332_887, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_bundle(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `6108`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(40_584_671, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn buy_bundle(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1176`
		//  Estimated: `6108`
		// Minimum execution time: 51_000_000 picoseconds.
		Weight::from_parts(52_524_018, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			// Standard Error: 29_473
			.saturating_add(Weight::from_parts(89_768, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_wishlist(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(23_955_084, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:2 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn fill_wishlist(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1047`
		//  Estimated: `6108`
		// Minimum execution time: 52_000_000 picoseconds.
		Weight::from_parts(55_072_629, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(5))
	}
	/// Storage: Game Game (r:1 w:0)
	/// Proof: Game Game (max_values: None, max_size: Some(96), added: 2571, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:0)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game CollectionsOf (r:1 w:1)
	/// Proof: Game CollectionsOf (max_values: None, max_size: Some(33), added: 2508, mode: MaxEncodedLen)
	/// Storage: Game GamesOf (r:0 w:1)
	/// Proof: Game GamesOf (max_values: None, max_size: Some(16), added: 2491, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn remove_collection(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `610`
		//  Estimated: `3561`
		// Minimum execution time: 17_000_000 picoseconds.
		Weight::from_parts(17_911_697, 0)
			.saturating_add(Weight::from_parts(0, 3561))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn lock_item_transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_069_380, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn unlock_item_transfer(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `364`
		//  Estimated: `3534`
		// Minimum execution time: 13_000_000 picoseconds.
		Weight::from_parts(14_082_441, 0)
			.saturating_add(Weight::from_parts(0, 3534))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_swap(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `6108`
		// Minimum execution time: 38_000_000 picoseconds.
		Weight::from_parts(40_172_209, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game TradeConfigOf (r:1 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:4 w:4)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_swap(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `863`
		//  Estimated: `11226`
		// Minimum execution time: 56_000_000 picoseconds.
		Weight::from_parts(59_287_015, 0)
			.saturating_add(Weight::from_parts(0, 11226))
			// Standard Error: 49_703
			.saturating_add(Weight::from_parts(94_355, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(9))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game AuctionConfigOf (r:0 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `503`
		//  Estimated: `6108`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(39_950_688, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:0)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn bid_auction(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `493`
		//  Estimated: `3593`
		// Minimum execution time: 18_000_000 picoseconds.
		Weight::from_parts(19_248_980, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 20_118
			.saturating_add(Weight::from_parts(1_274, 0).saturating_mul(s.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: Game AuctionConfigOf (r:1 w:1)
	/// Proof: Game AuctionConfigOf (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	/// Storage: Game HighestBidOf (r:1 w:1)
	/// Proof: Game HighestBidOf (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Game ReservedBalanceOf (r:2 w:2)
	/// Proof: Game ReservedBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:2 w:2)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_auction(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `869`
		//  Estimated: `6108`
		// Minimum execution time: 49_000_000 picoseconds.
		Weight::from_parts(52_606_523, 0)
			.saturating_add(Weight::from_parts(0, 6108))
			.saturating_add(RocksDbWeight::get().reads(8))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	/// Storage: Game NextTradeId (r:1 w:1)
	/// Proof: Game NextTradeId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Game TradeConfigOf (r:0 w:1)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn set_buy(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3606`
		// Minimum execution time: 22_000_000 picoseconds.
		Weight::from_parts(24_038_035, 0)
			.saturating_add(Weight::from_parts(0, 3606))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	/// Storage: Game TradeConfigOf (r:1 w:0)
	/// Proof: Game TradeConfigOf (max_values: None, max_size: Some(192), added: 2667, mode: MaxEncodedLen)
	/// Storage: Game BundleOf (r:1 w:1)
	/// Proof: Game BundleOf (max_values: None, max_size: Some(141), added: 2616, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:0)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Game ItemBalanceOf (r:1 w:1)
	/// Proof: Game ItemBalanceOf (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `s` is `[0, 10]`.
	fn claim_set_buy(_s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940`
		//  Estimated: `3657`
		// Minimum execution time: 36_000_000 picoseconds.
		Weight::from_parts(38_178_835, 0)
			.saturating_add(Weight::from_parts(0, 3657))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}
