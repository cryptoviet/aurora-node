
//! Autogenerated weights for `pallet_faucet`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-12, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `admin`, CPU: `<UNKNOWN>`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_faucet
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./benchmarking/pallet-faucet/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn faucet(s: u32, ) -> Weight;
	fn donate(s: u32, ) -> Weight;
}
/// Weight functions for `pallet_faucet`.
pub struct FaucetWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for FaucetWeight<T> {
	/// Storage: Faucet GenesisAccounts (r:1 w:0)
	/// Proof: Faucet GenesisAccounts (max_values: Some(1), max_size: Some(97), added: 592, mode: MaxEncodedLen)
	/// Storage: PalletCache DataLeft (r:1 w:1)
	/// Proof: PalletCache DataLeft (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: PalletCache DataRight (r:1 w:0)
	/// Proof: PalletCache DataRight (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: PalletCache DataFlag (r:1 w:0)
	/// Proof: PalletCache DataFlag (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 1]`.
	fn faucet(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295`
		//  Estimated: `3593`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_437_500, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 210_931
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(b.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Faucet GenesisAccounts (r:1 w:0)
	/// Proof: Faucet GenesisAccounts (max_values: Some(1), max_size: Some(97), added: 592, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 10]`.
	fn donate(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386`
		//  Estimated: `6196`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(28_238_731, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(2))
	}
}

impl WeightInfo for () {
	/// Storage: Faucet GenesisAccounts (r:1 w:0)
	/// Proof: Faucet GenesisAccounts (max_values: Some(1), max_size: Some(97), added: 592, mode: MaxEncodedLen)
	/// Storage: PalletCache DataLeft (r:1 w:1)
	/// Proof: PalletCache DataLeft (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: PalletCache DataRight (r:1 w:0)
	/// Proof: PalletCache DataRight (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: PalletCache DataFlag (r:1 w:0)
	/// Proof: PalletCache DataFlag (max_values: Some(1), max_size: Some(1), added: 496, mode: MaxEncodedLen)
	/// The range of component `b` is `[0, 1]`.
	fn faucet(b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295`
		//  Estimated: `3593`
		// Minimum execution time: 30_000_000 picoseconds.
		Weight::from_parts(32_437_500, 0)
			.saturating_add(Weight::from_parts(0, 3593))
			// Standard Error: 210_931
			.saturating_add(Weight::from_parts(62_500, 0).saturating_mul(b.into()))
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	/// Storage: System Account (r:2 w:2)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Faucet GenesisAccounts (r:1 w:0)
	/// Proof: Faucet GenesisAccounts (max_values: Some(1), max_size: Some(97), added: 592, mode: MaxEncodedLen)
	/// The range of component `b` is `[1, 10]`.
	fn donate(_b: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `386`
		//  Estimated: `6196`
		// Minimum execution time: 26_000_000 picoseconds.
		Weight::from_parts(28_238_731, 0)
			.saturating_add(Weight::from_parts(0, 6196))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
}
