
//! Autogenerated weights for `pallet_staking_pool`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-05, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// --chain
// dev
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_staking_pool
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --json-file=raw.json
// --output
// ./pallets/src/staking-pool/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn stake(s: u32, ) -> Weight;
	fn unstake(s: u32, ) -> Weight;
}

/// Weight functions for `pallet_staking_pool`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: StakePool Players (r:1 w:1)
	// Storage: StakePool StakeAmount (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: StakePool PlayerCount (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	fn stake(s: u32, ) -> Weight {
		(26_806_000 as Weight)
			// Standard Error: 200_000
			.saturating_add((83_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(T::DbWeight::get().reads(9 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
	// Storage: StakePool Players (r:1 w:1)
	// Storage: StakePool StakeAmount (r:1 w:0)
	// Storage: StakePool PlayerCount (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn unstake(_s: u32, ) -> Weight {
		(26_583_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
	}
}


impl WeightInfo for () {
	fn stake(s: u32, ) -> Weight {
		(26_806_000 as Weight)
			// Standard Error: 200_000
			.saturating_add((83_000 as Weight).saturating_mul(s as Weight))
			.saturating_add(RocksDbWeight::get().reads(9 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}

	fn unstake(_s: u32, ) -> Weight {
		(26_583_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(8 as Weight))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
	}
}
