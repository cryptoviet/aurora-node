#![allow(clippy::all)] 

//! Autogenerated weights for `funding_pool`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-04-30, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// funding_pool
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./pallets/benchmarks/funding_pool/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;
use frame_support::weights::constants::RocksDbWeight;

pub trait WeightInfo {
	fn create_pool(s: u64, ) -> Weight;
	fn withdraw_pool(s: u64, ) -> Weight;
	fn new_targets(s: u64, ) -> Weight;
	fn set_pool_name(s: u64, ) -> Weight;
	fn clear_pool_name(_s: u32, ) -> Weight;
	fn kill_pool_name(_s: u32, ) -> Weight;
}


/// Weight functions for `funding_pool`.
pub struct FundingWeight<T>(PhantomData<T>);


impl<T: frame_system::Config> WeightInfo for FundingWeight<T> {
	// Storage: System Number (r:1 w:0)
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: FundingPool Pools (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: FundingPool PoolOwned (r:1 w:1)
	// Storage: FundingPool Targets (r:1 w:1)
	fn create_pool(s: u64, ) -> Weight {
		Weight::from_ref_time(31_348_000u64).saturating_mul(s)
			.saturating_add(T::DbWeight::get().reads(10u64))
			.saturating_add(T::DbWeight::get().writes(7u64))
	}
	// Storage: FundingPool Pools (r:1 w:1)
	// Storage: System Account (r:2 w:2)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: FundingPool PoolOwned (r:1 w:1)
	// Storage: FundingPool Targets (r:0 w:1)
	fn withdraw_pool(s: u64, ) -> Weight {
		Weight::from_ref_time(28_250_000u64).saturating_mul(s)
			.saturating_add(T::DbWeight::get().reads(8u64))
			.saturating_add(T::DbWeight::get().writes(7u64))
	}
	// Storage: FundingPool Pools (r:1 w:0)
	// Storage: FundingPool Targets (r:0 w:1)
	fn new_targets(s: u64, ) -> Weight {
		Weight::from_ref_time(5_000_000u64).saturating_mul(s)
			.saturating_add(T::DbWeight::get().reads(1u64))
			.saturating_add(T::DbWeight::get().writes(1u64))
	}
	// Storage: FundingPool Pools (r:1 w:0)
	// Storage: PoolName NameOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn set_pool_name(s: u64, ) -> Weight {
		Weight::from_ref_time(14_932_000u64)
			// Standard Error: 13_000
			.saturating_add(Weight::from_ref_time(2_000u64).saturating_mul(s))
			.saturating_add(T::DbWeight::get().reads(7u64))
			.saturating_add(T::DbWeight::get().writes(4u64))
	}
	// Storage: FundingPool Pools (r:1 w:0)
	// Storage: PoolName NameOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	fn clear_pool_name(_s: u32, ) -> Weight {
		Weight::from_ref_time(15_076_000u64)
			.saturating_add(T::DbWeight::get().reads(7u64))
			.saturating_add(T::DbWeight::get().writes(4u64))
	}
	// Storage: FundingPool Pools (r:1 w:0)
	// Storage: PoolName NameOf (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	fn kill_pool_name(_s: u32, ) -> Weight {
		Weight::from_ref_time(16_659_000u64)
			.saturating_add(T::DbWeight::get().reads(8u64))
			.saturating_add(T::DbWeight::get().writes(5u64))
	}
}

impl WeightInfo for () {
	fn create_pool(s: u64, ) -> Weight {
		Weight::from_ref_time(31_348_000u64).saturating_mul(s)
			.saturating_add(RocksDbWeight::get().reads(10u64))
			.saturating_add(RocksDbWeight::get().writes(7u64))
	}

	fn withdraw_pool(s: u64, ) -> Weight {
		Weight::from_ref_time(28_250_000u64).saturating_mul(s)
			.saturating_add(RocksDbWeight::get().reads(8u64))
			.saturating_add(RocksDbWeight::get().writes(7u64))
	}

	fn new_targets(s: u64, ) -> Weight {
		Weight::from_ref_time(5_000_000u64).saturating_mul(s)
			.saturating_add(RocksDbWeight::get().reads(1u64))
			.saturating_add(RocksDbWeight::get().writes(1u64))
	}

	fn set_pool_name(s: u64, ) -> Weight {
		Weight::from_ref_time(14_932_000u64)
			// Standard Error: 13_000
			.saturating_add(Weight::from_ref_time(2_000u64).saturating_mul(s))
			.saturating_add(RocksDbWeight::get().reads(7u64))
			.saturating_add(RocksDbWeight::get().writes(4u64))
	}

	fn clear_pool_name(_s: u32, ) -> Weight {
		Weight::from_ref_time(15_076_000u64)
			.saturating_add(RocksDbWeight::get().reads(7u64))
			.saturating_add(RocksDbWeight::get().writes(4u64))
	}

	fn kill_pool_name(_s: u32, ) -> Weight {
		Weight::from_ref_time(16_659_000u64)
			.saturating_add(RocksDbWeight::get().reads(8u64))
			.saturating_add(RocksDbWeight::get().writes(5u64))
	}
}
