
//! Autogenerated weights for `pallet_pool`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-07-29, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/gafi-node
// benchmark
// pallet
// --chain
// dev
// --wasm-execution
// compiled
// --pallet
// pallet_pool
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --output
// ./benchmarking/pool/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use gafi_primitives::ticket::{TicketType};
use sp_std::marker::PhantomData;
use gafi_primitives::constant::ID;

pub trait WeightInfo {
	fn join(s: u64, ) -> Weight;
	fn leave(s: u64, ) -> Weight;
	fn leave_all(s: u64, ) -> Weight;
}

/// Weight functions for `pallet_pool`.
pub struct PoolWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for PoolWeight<T> {
	// Storage: Pool Tickets (r:1 w:1)
	// Storage: UpfrontPool Services (r:1 w:0)
	// Storage: StakingPool Services (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: StakingPool PlayerCount (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: PalletCache DataLeft (r:1 w:0)
	// Storage: PalletCache DataRight (r:1 w:0)
	// Storage: StakingPool Tickets (r:0 w:1)
	// Storage: UpfrontPool PlayerCount (r:1 w:1)
	// Storage: UpfrontPool MaxPlayer (r:1 w:0)
	// Storage: UpfrontPool NewPlayers (r:1 w:1)
	// Storage: Balances TotalIssuance (r:1 w:1)
	// Storage: UpfrontPool Tickets (r:0 w:1)
	fn join(s: u64, ) -> Weight {
		Weight::from_ref_time(42_018_000u64)
			// Standard Error: 323_000
			.saturating_add(Weight::from_ref_time(756_000u64).saturating_mul(s))
			.saturating_add(T::DbWeight::get().reads(12u64))
			.saturating_add(T::DbWeight::get().writes(6u64))
	}
	// Storage: Pool Tickets (r:1 w:1)
	// Storage: StakingPool Tickets (r:1 w:1)
	// Storage: StakingPool PlayerCount (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Player TotalTimeJoinedUpfront (r:1 w:1)
	// Storage: StakingPool Services (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: PalletCache DataFlag (r:1 w:0)
	// Storage: PalletCache DataLeft (r:0 w:1)
	// Storage: UpfrontPool Tickets (r:1 w:1)
	// Storage: UpfrontPool Services (r:1 w:0)
	// Storage: Pool TimeService (r:1 w:0)
	// Storage: Balances TotalIssuance (r:1 w:1)
	// Storage: UpfrontPool PlayerCount (r:1 w:1)
	// Storage: UpfrontPool IngamePlayers (r:1 w:1)
	// Storage: UpfrontPool NewPlayers (r:1 w:1)
	fn leave(s: u64, ) -> Weight {
		Weight::from_ref_time(40_714_000u64)
		// Standard Error: 507_000
		.saturating_add(Weight::from_ref_time(1_214_000u64).saturating_mul(s))
		.saturating_add(T::DbWeight::get().reads(12u64))
		.saturating_add(T::DbWeight::get().writes(8u64))
	}

	// Storage: UpfrontPool Tickets (r:1 w:0)
	// Storage: StakingPool Tickets (r:1 w:1)
	// Storage: StakingPool PlayerCount (r:1 w:1)
	// Storage: Timestamp Now (r:1 w:0)
	// Storage: Player TotalTimeJoinedUpfront (r:1 w:1)
	// Storage: StakingPool Services (r:1 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: System Number (r:1 w:0)
	// Storage: System ExecutionPhase (r:1 w:0)
	// Storage: System EventCount (r:1 w:1)
	// Storage: System Events (r:1 w:1)
	// Storage: Pool Tickets (r:0 w:1)
	// Storage: UpfrontPool Services (r:1 w:0)
	// Storage: Pool TimeService (r:1 w:0)
	// Storage: Balances TotalIssuance (r:1 w:1)
	// Storage: UpfrontPool PlayerCount (r:1 w:1)
	// Storage: UpfrontPool IngamePlayers (r:1 w:1)
	// Storage: UpfrontPool NewPlayers (r:1 w:1)
	fn leave_all(s: u64, ) -> Weight {
		Weight::from_ref_time(41_476_000u64)
			// Standard Error: 368_000
			.saturating_add(Weight::from_ref_time(905_000u64).saturating_mul(s))
			.saturating_add(T::DbWeight::get().reads(11u64))
			.saturating_add(T::DbWeight::get().writes(7u64))
	}
}

impl WeightInfo for () {
	fn join(s: u64, ) -> Weight {

		Weight::from_ref_time(42_018_000u64)
			// Standard Error: 323_000
			.saturating_add(Weight::from_ref_time(756_000u64).saturating_mul(s))
			.saturating_add(RocksDbWeight::get().reads(12u64))
			.saturating_add(RocksDbWeight::get().writes(6u64))
	}

	fn leave(s: u64,) -> Weight {
		Weight::from_ref_time(40_714_000u64)
		// Standard Error: 507_000
		.saturating_add(Weight::from_ref_time(1_214_000u64).saturating_mul(s))
		.saturating_add(RocksDbWeight::get().reads(12u64))
		.saturating_add(RocksDbWeight::get().writes(8u64))
	}

	fn leave_all(s: u64, ) -> Weight {
		Weight::from_ref_time(41_476_000u64)
			// Standard Error: 368_000
			.saturating_add(Weight::from_ref_time(905_000u64).saturating_mul(s))
			.saturating_add(RocksDbWeight::get().reads(11u64))
			.saturating_add(RocksDbWeight::get().writes(7u64))
	}
}
